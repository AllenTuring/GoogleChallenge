Interpretation:
------------------
Okay so there are teams of henchmen. They get lambs as payment.
We are number n. *cue music*

1. The lowest guy on the totem pole gets one lamb.
2. The rank n+1 on you gets no more than 2x your share.
3. n-1 and n-2 combined get equal to or less than you at n.
4. Pay out until you can't add more to the top of the payroll.

Lambs are indivisible, and you might not be able to spend all of them.

Given a number of lambs between 10 and a billion, how many henchmen can you pay?
Find the difference between the minimum number and maximum number of henchmen.

Thoughts:
------------------------
Okay, so the most generous way (fewest henchmen) is clearly 2x at each stage, or an exponential.
Floor and Log 2 is the fastest way to find this number. We might need some adjustment

The stingiest way is going to be fibonacci series payments.

Hmm, will we have weird edge cases where we have to deal with leftovers?
Quick proof for minimum payment:
	For minimum no. If you have enough left over to pay another henchman, that leftover must be greater than the fibonacci minimum and we'd have detected it.

For maximum, is it possible we have an amount to pay out that is greater than pay(n-1) + pay(n-2) but less than 2*pay(n-1)?
	Yes, there will be a term! There is space between these two values. We must account for this.
	Ignore previous version of this note; I was thinking the wrong orientation.


Hm, a billion lambs is a big number. Log is going to be fast (especially if we use a bitwise solution in java lol), but is there a fast way to do the Fibonacci sum?

Wait, these are thresholded values. What if we generate a table to begin with and then do sorted lookups?


----------------

Aww heck yeah, got minimum working like a baller.
Also found ultra-fast floor(log2(x)) implementation derived from the ceil(log2(x)) listed at https://stackoverflow.com/questions/13105875/compute-fast-log-base-2-ceiling-in-python
Hooray for stack overflow!
